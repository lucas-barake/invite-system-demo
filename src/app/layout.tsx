import "@/styles/globals.css";

import { Inter } from "next/font/google";
import { TRPCReactProvider } from "@/trpc/react";
import React from "react";
import { unstable_noStore } from "next/cache";
import { api } from "@/trpc/server";
import { UserStoreInitializer } from "@/app/_lib/components/user-store-initializer";
import { AuthGuard } from "@/app/_lib/components/auth-guard";
import { cn } from "@/lib/cn";
import { Toaster } from "@/components/ui/toaster";
import { type User } from "@/server/api/routers/user/repository/user.repository.types";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export const metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

type Props = {
  children: React.ReactNode;
};

async function getMe(): Promise<User | null> {
  try {
    return await api.auth.me.query();
  } catch {
    return null;
  }
}

const RootLayout: React.FC<Props> = async ({ children }) => {
  unstable_noStore();
  const user = await getMe();

  return (
    <html lang="en">
      <body className={cn("font-sans bg-background", inter.variable)}>
        <TRPCReactProvider>
          <Toaster />
          <UserStoreInitializer user={user} />
          <AuthGuard>{children}</AuthGuard>
        </TRPCReactProvider>
      </body>
    </html>
  );
};

export const dynamic = "force-dynamic";
export const revalidate = 0;

export default RootLayout;
