// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  name           String?
  email          String        @unique
  imageUrl       String?
  groups         Group[]
  groupsAsMember GroupMember[]

  @@index([email])
  @@map("users")
}

model Group {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  title          String
  todos          Todo[]
  pendingInvites GroupInvite[]
  owner          User          @relation(fields: [ownerId], references: [id])
  ownerId        String        @map("owner_id") @db.Uuid()
  members        GroupMember[]

  @@map("groups")
}

model GroupMember {
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.Uuid()
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String   @map("group_id") @db.Uuid()

  @@id([userId, groupId])
  @@map("group_members")
}

model Todo {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  title     String
  done      DateTime?
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String    @map("group_id") @db.Uuid()

  @@map("todos")
}

model GroupInvite {
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  inviteeEmail   String   @map("invitee_email")
  expirationTime DateTime @map("expiration_time") @db.Timestamptz()
  group          Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        String   @map("group_id") @db.Uuid()

  @@id([inviteeEmail, groupId])
  @@index([inviteeEmail])
  @@index([groupId])
  @@index([expirationTime])
  @@map("group_invites")
}
